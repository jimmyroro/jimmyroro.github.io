{"version":3,"sources":["pictures/profile.jpg","pictures/upcloseLogo.svg","pictures/crawlLogo.png","pictures/organizeLogo.png","Components/Contact.jsx","Components/Home.jsx","Components/Projects.jsx","Components/Navbar.jsx","Components/App.jsx","index.js"],"names":["module","exports","mailjet","require","connect","process","Contact","requestObj","Messages","From","HTMLPart","emailIsValid","email","test","Form","Group","controlId","Label","Control","onChange","e","Name","target","value","changeName","type","placeholder","Email","changeEmail","as","rows","changeText","class","onClick","post","request","then","result","console","log","body","catch","err","statusCode","alert","Home","id","src","profile","alt","to","Projects","upcloseLogo","href","organizeLogo","crawlLogo","Navbar","exact","path","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1e312db.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.d9648c37.jpg\";","module.exports = __webpack_public_path__ + \"static/media/upcloseLogo.c1a8af4b.svg\";","module.exports = __webpack_public_path__ + \"static/media/crawlLogo.fe685243.png\";","module.exports = __webpack_public_path__ + \"static/media/organizeLogo.86400b42.png\";","import React from 'react';\nimport { Form } from 'react-bootstrap'\n\n// prepare mailjet with public and private keys\nconst mailjet = require('node-mailjet')\n  .connect(process.env.REACT_APP_MJ_APIKEY_PUBLIC, process.env.REACT_APP_MJ_APIKEY_PRIVATE)\n\nconst Contact = () => {\n\n  //hold sender, sender name, subject, and text in an object\n  const requestObj = {\n    \"Messages\": [\n      {\n        \"From\": {\n          \"Email\": null,\n          \"Name\": null,\n        },\n        \"To\": [\n          {\n            \"Email\": \"jimmyroro58@gmail.com\",\n            \"Name\": \"Richard\"\n          }\n        ],\n        \"Subject\": \"Email from my website\",\n        \"TextPart\": \"Website email\",\n        \"HTMLPart\": null,\n        \"CustomID\": \"Message from my website\"\n      }\n    ]\n  }\n  // destructure to edit sender, subject and text\n  let { Messages: [{ From, HTMLPart }] } = requestObj;\n\n  function emailIsValid (email) {\n    return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)\n  }\n\n  const sendEmail = () => {\n    // name isn't given\n    // email isn't given / is wrong\n    // text is empty\n    if (From.Name && emailIsValid(From.Email) && HTMLPart) {\n      mailjet.post(\"send\", { 'version': 'v3.1' }).request(requestObj)\n        .then((result) => {\n          console.log(result.body)\n        })\n        .catch((err) => {\n          console.log(err.statusCode)\n        })\n    } else {\n      if (!From.Name) {\n        alert(\"please enter a name\")\n      }\n      if (!emailIsValid(From.Email)) {\n        alert(\"please make sure your email is properly formatted\")\n      }\n      if (!HTMLPart) {\n        alert(\"please enter a message\")\n      }\n    }\n  }\n\n\n  const changeEmail = (e) => {\n    From.Email = e.target.value;\n  }\n\n  const changeName = (e) => {\n    From.Name = e.target.value;\n  }\n\n  const changeText = (e) => {\n    HTMLPart = e.target.value;\n  }\n\n  return (\n    <div>\n      <Form>\n        <Form.Group controlId=\"inputName\">\n          <Form.Label>Name</Form.Label>\n          <Form.Control onChange={(e) => { changeName(e) }} />\n        </Form.Group>\n        <Form.Group controlId=\"inputEmail\">\n          <Form.Label>Email address</Form.Label>\n            <Form.Control type=\"email\" placeholder=\"name@example.com\" onChange={(e) => { changeEmail(e) }} />\n        </Form.Group>\n        <Form.Group controlId=\"inputText\">\n          <Form.Label>Example textarea</Form.Label>\n          <Form.Control as=\"textarea\" rows=\"3\" onChange={(e) => { changeText(e) }} />\n        </Form.Group>\n      </Form>\n      <div class=\"btn btn-primary\" onClick={sendEmail}>\n        send that email!\n      </div>\n    </div>\n  )\n}\n\nexport default Contact;\n\n","import React from 'react';\nimport profile from '../pictures/profile.jpg';\nimport {Link} from 'react-router-dom';\n\nconst Home = () => {\n  return (\n    <div class=\"container\" id=\"bio-body\">\n        <div class=\"row\">\n          <div class=\"col-sm\">\n            <img src={profile} alt=\"me\"></img>\n          </div>\n          <div class=\"col-sm\">\n            <div class=\"row\">\n              I'm a software developer looking for my next project. I've worked front end and backend, and am always up to learn new things. Check out my latest projects below, and don't hesitate to reach out to me!\n            </div>\n            <div class=\"row\">\n              <Link to=\"./projects\">link to projects? pictures of them or something?</Link>\n            </div>\n          </div>\n        </div>\n      </div>\n  )\n}\n\nexport default Home;","import React from 'react';\nimport upcloseLogo from '../pictures/upcloseLogo.svg';\nimport crawlLogo from '../pictures/crawlLogo.png';\nimport organizeLogo from '../pictures/organizeLogo.png';\n\nconst Projects = () => {\n  return (\n    <div class=\"card-group\">\n      <div class=\"card\">\n        <img class=\"card-img-top h-50\" src={upcloseLogo} alt=\"Logo for Upclose\" />\n        <div class=\"card-body\">\n          <h5 class=\"card-title\">UpClose</h5>\n          <p class=\"card-text\">Upclose is a website my team and I developed from greenfield to deployment. It allows users to create a party and invite people to join it. Once inside a party, WebRTC and socket.io allow users to see and hear each other. There is a spatial aspect too, where audio diminishes as you get farther away from other usersâ€™ avatars.  I worked in the fronted and backend, using React hooks to build out the frontend and authenticated users with Google Login, saving the users and their parties to a remote MYSQL database. I learned how to integrate Typescript with React.js, and how to style with Tailwind instead of traditional CSS.</p>\n          <a href=\"https://upclose.uc.r.appspot.com/\" class=\"btn btn-primary\">Website</a>\n          <a href=\"https://github.com/HearTogether/upclose\" class=\"btn btn-primary\">Repo</a>\n        </div>\n      </div>\n      <div class=\"card\">\n        <img class=\"card-img-top h-50\" src={organizeLogo} alt=\"Logo for Upclose\" />\n        <div class=\"card-body\">\n          <h5 class=\"card-title\">Organize power</h5>\n          <p class=\"card-text\">Organize power is a website that my team and I modified. It is a platform for creating movements that people can join and learn about, and was built with React.js, Node, Express, and MySQL. We added user stories to it, including messaging, linking charities, and creating events in a calendar.</p>\n          <a href=\"https://github.com/Apptonomy/organizepower\" class=\"btn btn-primary\">Repo</a>\n        </div>\n      </div>\n      <div class=\"card\">\n        <img class=\"card-img-top h-50\" src={crawlLogo} alt=\"Logo for Upclose\" />\n        <div class=\"card-body\">\n          <h5 class=\"card-title\">Crawl</h5>\n          <p class=\"card-text\">Crawl is a website that allows you to create a pub crawl and keep track of your buddies. We created it using Vue.js, Node, Express, and MySQL. We used Google to authenticate users, and also to allow users to search on a map for bars to save for their crawl.</p>\n          <a href=\"https://github.com/Apptonomy/Crawl\" class=\"btn btn-primary\">Repo</a>\n        </div>\n      </div>\n    </div>\n  ) \n}\n\nexport default Projects;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport Contact from './Contact';\nimport Home from './Home';\nimport Projects from './Projects'\n\nconst Navbar = () => {\n  return (\n    <Router>\n      <div class=\"container-fluid\" id=\"navbar\">\n          <div class=\"row\">\n            <div class=\"col-sm\">\n              <Link to=\"/\">Bio</Link>\n            </div>\n            <div class=\"col-6\" id=\"projects-header\">\n              <Link to=\"/projects\">Projects</Link>\n            </div>\n            <div class=\"col-sm\">\n              <a href=\"https://www.linkedin.com/in/richard-james-rosier/\">LinkedIn</a>\n            </div>\n            <div class=\"col-sm\">\n              <Link to=\"/contact\">Contact</Link>\n            </div>\n          </div>\n        </div>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route exact path=\"/projects\">\n            <Projects />\n          </Route>\n          <Route exact path=\"/contact\">\n            <Contact />\n          </Route>\n        </Switch>\n    </Router>\n  )\n}\n\nexport default Navbar;","import React from 'react';\nimport Navbar from './Navbar';\nimport Home from './Home';\nimport '../App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\" >\n      <Navbar/>\n    </div>\n  );\n}\n\nexport default App;\n\n// $(document).ready(() => {\n//   visitor = \"\";\n\n//   ////////making a function for adding tweets to feed\n//   let addTweets = function (array) {\n//     let $tweets = array.map((tweet) => {        //variable to represent the tweets, as divisions, made via map\n//       $('#feed').empty();\n//       //making the tweet timestamp into a standard format, and then making it more user friendly\n//       let tweetCreationTime = moment(tweet.created_at).format('LLLL');\n//       let timeStamp = moment(tweetCreationTime, 'LLLL').fromNow();\n//       // creating tweet as unordered list\n//       const $tweet = $(`<div class='container' id='entire-tweet'></div>`)\n//       // const $tweet = $(`<ul id='entire-tweet'></ul>`)\n//       let $usernameList = $(`<li>@${tweet.user}</li>`);\n//       $usernameList.addClass(`username ${tweet.user}`)\n//       $usernameList.append('<div class=\"twiddled\"> Twiddled:</div>')\n//       $tweet.append($usernameList);\n//       $tweet.append(`<li class='tweet-text'>${tweet.message}</li>`)\n//       $tweet.append(`<li class='tweet-timestamp'>${timeStamp}</li>`)\n\n//       return $tweet;\n//     });\n//     ////adding tweets to the feed section\n//     $('#feed').prepend($tweets);\n//     $('.username').click(function (){\n//       ///this cuts off the @ and Twiddled:, leaving only the username\n//       let justUsername = $(this).text().split(\" \")[0].slice(1);\n//     addTweets(streams.users[justUsername]);\n//     })\n\n//   };\n\n//   ////invoking function so the page loads with something on it\n//   addTweets(streams.home);\n\n//   //add tweets to feed by clicking the button\n//   $('#more-tweets-button').click(function(){\n//     addTweets(streams.home);\n//   });\n\n//   //toggle automatic tweet adding. changes color and text when clicked\n//   let doAutoColor = false;\n//   let autoTweet = null;\n//   $('#automatic-tweet-button').click(function(){ \n//     if (doAutoColor) {\n//       clearInterval(autoTweet);\n//       doAutoColor = false;\n//       $('#automatic-tweet-button').text('Auto adding Twiddles is off')\n//       $('#automatic-tweet-button').css('background-color', 'red')\n//     } else {\n//       doAutoColor = true;\n//       autoTweet = setInterval(addTweets, 1000, streams.home);\n//       $('#automatic-tweet-button').text('Auto-adding Twiddles');\n//       $('#automatic-tweet-button').css('background-color', 'green')\n//     }\n\n\n//   });\n\n//   /////make the text in tweet writing area vanish on first click//////////\n//   let firstClick = 0\n//   $('#new-tweet-text-area').click(function (){\n//     if (firstClick === 0) {\n//       $('#new-tweet-text-area').text(\"\")\n//       $('#new-tweet-text-area').val(\"\")\n\n//     }\n//     firstClick++;\n//   });\n\n//   ///////////function to post your own  tweet/////////\n//   const writeTweet = (message) => {\n//     const visitor = window.visitor;\n//     if (!visitor){\n//       alert('Please enter a username!');\n//       throw new Error('Set the global visitor property!');\n//     }\n//     //creating tweet object\n//     const tweet = {\n//       user: visitor,\n//       message: message,\n//       created_at: moment(new Date()).format('LLLL'),\n//     };\n//     //pushing tweet object into an array, so we can create a history of tweets\n//     streams.users[visitor].unshift(tweet);\n//     streams.home.unshift(tweet);\n//     addTweets(streams.home);\n//   };\n\n//   ///post your own tweet by clicking the button\n//   $('#share-tweet-button').click(function() {\n//     writeTweet($(\"#new-tweet-text-area\").val());\n//     $('#new-tweet-text-area').val(\"Share a Twiddle?\");\n//     firstClick = 0;\n//   });\n\n//   let usernameFirstClick = 0;\n//   ///make the text in username area vanish on first click///\n//   $('#visitor-text-area').click(function (){\n//     if (usernameFirstClick === 0) {\n//       $('#visitor-text-area').text(\"\");\n//       $('#visitor-text-area').val(\"\");\n//     }\n//     usernameFirstClick++;\n//   })\n\n// /////setting your username button/////\n// $('#set-username-button').click(function(){\n//   if (($('#visitor-text-area').val()).includes(\" \")) {\n//     alert('Username must not contain spaces')\n//     throw new Error('Username must not contain spaces')\n//   } \n//   visitor = $('#visitor-text-area').val();\n//   if (!streams.users[visitor]) {\n//     streams.users[visitor] = [];\n//   }\n//   $('#set-username-button').text('Change username');\n//   $('#visitor-text-area').text(\"\");\n//   $('#posting-as-text').text(`Now posting as: ${visitor}`);\n//   usernameFirstClick = 0;\n// })\n// ////////////allowing click on users to display only that users' twiddles//////////\n// $('.username').click(function (){\n//   ///this cuts off the @ and Twiddled:, leaving only the username\n//   let justUsername = $(this).text().split(\" \")[0].slice(1);\n// addTweets(streams.users[justUsername]);\n// })\n\n\n\n\n\n// });","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}